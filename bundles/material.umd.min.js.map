{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTreeNodeDef as any)['ctorParameters'] = () => (CdkTreeNodeDef as any)['ctorParameters'];\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTreeNodePadding as any)['ctorParameters'] = () =>\n    (CdkTreeNodePadding as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTree as any)['ctorParameters'] = () => (CdkTree as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTreeNodeToggle as any)['ctorParameters'] = () => (CdkTreeNodeToggle as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.1-530c0eb');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      this._overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!_platform.IOS && !_platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide())\n        .forEach((listener, event) => element.addEventListener(event, listener));\n    }\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatCellDef as any)['ctorParameters'] = () => (CdkCellDef as any)['ctorParameters'];\n(MatHeaderCellDef as any)['ctorParameters'] = () => (CdkHeaderCellDef as any)['ctorParameters'];\n(MatFooterCellDef as any)['ctorParameters'] = () => (MatFooterCellDef as any)['ctorParameters'];\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatHeaderRowDef as any)['ctorParameters'] = () => (CdkHeaderRowDef as any)['ctorParameters'];\n(MatFooterRowDef as any)['ctorParameters'] = () => (CdkFooterRowDef as any)['ctorParameters'];\n(MatRowDef as any)['ctorParameters'] = () => (CdkRowDef as any)['ctorParameters'];\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTabLabel as any)['ctorParameters'] = () => (CdkPortal as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  @Input() animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatStepLabel as any)['ctorParameters'] = () => (CdkStepLabel as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {StepState} from '@angular/cdk/stepper';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  MAT_STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(MAT_STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatStepper as any)['ctorParameters'] = () => (CdkStepper as any)['ctorParameters'];\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatStepperNext as any)['ctorParameters'] = () => (CdkStepperNext as any)['ctorParameters'];\n(MatStepperPrevious as any)['ctorParameters'] = () =>\n    (CdkStepperPrevious as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTable as any)['ctorParameters'] = () => (CdkTable as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n\n  return {\n    // Note that this needs to be a function, because Angular will only instantiate\n    // this provider once, but we want the current location on each call.\n    getPathname: () => (_document && _document.location && _document.location.pathname) || ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(touchstart)': '_openedBy = \"touch\"',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.asObservable().subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n    if (element.nodeName && element.nodeName.toLowerCase() === 'button'\n        && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => (_document && _document.location && _document.location.pathname) || ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n(MatTextareaAutosize as any)['ctorParameters'] = () =>\n    (CdkTextareaAutosize as any)['ctorParameters'];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges.subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /** Updates the outline gap the new time the zone stabilizes. */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => this.updateOutlineGap());\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["Object","defineProperty","MatTabNav","prototype","this","_backgroundColor","value","nativeElement","_elementRef","classList","remove","backgroundColor","add","updateActiveLink","element","_activeLinkChanged","_changeDetectorRef","markForCheck","ngAfterContentInit","_this","_ngZone","runOutsideAngular","dirChange","_dir","change","observableOf","merge","_viewportRuler","pipe","takeUntil","_onDestroy","subscribe","_alignInkBar","ngAfterContentChecked","activeTab","_tabLinks","find","tab","active","_activeLinkElement","ngOnDestroy","next","complete","_inkBar","show","alignToElement","hide","type","Component","args","selector","exportAs","inputs","template","styles","host","class","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","ChangeDetectorRef","ViewportRuler","propDecorators","Input","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_super","call","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","_ripplesGloballyDisabled","disabled","terminateOnPointerUp","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","decorators","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","mixinColor","MatToolbarRow","MatToolbar","elementRef","_platform","document","_document","tslib_1.__extends","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","length","Array","from","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","columnDef","cssClassFriendlyName","MatCell","CdkColumnDef","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","arguments","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTable","MatHeaderCellDef","MatColumnDef","MatCellDef","MatFooterCellDef","MatHeaderCell","MatFooterCell","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","Subscription","EMPTY","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","unsubscribe","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","requestAnimationFrame","_setStyles","style","visibility","positions","inkBar","left","width","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","animationDuration","dir","_computePositionAnimationState","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","toArray","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","max","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","Directionality","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","MatTabGroupBase","_MatTabGroupMixinBase","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","arrowPosition","SORT_ANIMATION_TRANSITION","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","disableClear","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MAT_STEPPER_INTL_PROVIDER","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MAT_STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","stickyCssClass","CDK_TABLE_TEMPLATE","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","sticky","stickyEnd","CdkHeaderCell","CdkFooterCell","MatSlider","_thumbLabel","_tickInterval","_value","_min","_roundToDecimal","parseFloat","toFixed","_percent","_calculatePercentage","_vertical","displayWith","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","_opened","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","_animationStarted","_animationEnd","isOpen","openedVia","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","MatDrawerContent","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_step","toString","split","pop","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","_primaryValueBar","animationEnd","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","itemHeight","_getItemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","empty","_getOptionIndex","_selectionModel","_countGroupLabelsBeforeOption","options","optionGroups","scrollBuffer","_scrollTop","_calculateOverlayScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","MatSelect","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","elementStyle","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_isNoopAnimation","_bufferValue","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","target","aria-valuemin","aria-valuemax","_attached","MatMenuContent","context","_template","_outlet","DomPortalOutlet","_componentFactoryResolver","_appRef","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedBy","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","button","asapScheduler","aria-haspopup","(touchstart)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_calculateOverlayPosition","_highlightCorrectOption","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","panel","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_getOptionScrollPosition","result","current","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","setLines","_lines","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","hadFocus","newActiveItem","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","focusedOption","focusedIndex","hasChanged","aria-multiselectable","_MatListMixinBase","_navList","_isNavList","hasAttribute","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","_gridList","MAT_GRID_LIST","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","_dateAdapter","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","MatDatepickerContent","afterClosed","componentInstance","datepicker","_setColor","_createPopup","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","CdkAccordionModule","MatExpansionModule","_colspan","property","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","aria-readonly","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","MatCheckbox","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","_calculateRippleRadius","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","calculatedRippleRadius","rippleWidth","ripple","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","stopImmediatePropagation","MatAnchor","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","defaultOptions","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatAutocomplete","_autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","showPanel","_emitSelectEvent","MatAutocompleteSelectedEvent","optionSelected","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","window","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","HAMMER_LOADER","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","normalizePassiveListenerOptions","passive","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","persistent","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}