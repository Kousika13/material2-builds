{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/constructor-metadata-inherit.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  _inheritCtorParametersMetadata,\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n_inheritCtorParametersMetadata(MatTreeNodeDef, CdkTreeNodeDef);\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\nimport {_inheritCtorParametersMetadata} from '@angular/material/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n_inheritCtorParametersMetadata(MatTreeNodePadding, CdkTreeNodePadding);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {_inheritCtorParametersMetadata} from '@angular/material/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n_inheritCtorParametersMetadata(MatTree, CdkTree);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\nimport {_inheritCtorParametersMetadata} from '@angular/material/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n_inheritCtorParametersMetadata(MatTreeNodeToggle, CdkTreeNodeToggle);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.2-30a8490');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      this._overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\nimport {_inheritCtorParametersMetadata} from '@angular/material/core';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n_inheritCtorParametersMetadata(MatHeaderRowDef, CdkHeaderRowDef);\n_inheritCtorParametersMetadata(MatFooterRowDef, CdkFooterRowDef);\n_inheritCtorParametersMetadata(MatRowDef, CdkRowDef);\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\nimport {_inheritCtorParametersMetadata} from '@angular/material/core';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n_inheritCtorParametersMetadata(MatTabLabel, CdkPortal);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  @Input() animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\nimport {_inheritCtorParametersMetadata} from '@angular/material/core';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n_inheritCtorParametersMetadata(MatStepLabel, CdkStepLabel);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  MAT_STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {_inheritCtorParametersMetadata, ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(MAT_STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n_inheritCtorParametersMetadata(MatStepper, CdkStepper);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\nimport {_inheritCtorParametersMetadata} from '@angular/material/core';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n_inheritCtorParametersMetadata(MatStepperNext, CdkStepperNext);\n_inheritCtorParametersMetadata(MatStepperPrevious, CdkStepperPrevious);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {_inheritCtorParametersMetadata} from '@angular/material/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n_inheritCtorParametersMetadata(MatTable, CdkTable);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\nimport {_inheritCtorParametersMetadata} from '@angular/material/core';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n_inheritCtorParametersMetadata(MatCellDef, CdkCellDef);\n_inheritCtorParametersMetadata(MatHeaderCellDef, CdkHeaderCellDef);\n_inheritCtorParametersMetadata(MatFooterCellDef, CdkFooterCellDef);\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n\n  return {\n    // Note that this needs to be a function, because Angular will only instantiate\n    // this provider once, but we want the current location on each call.\n    getPathname: () => (_document && _document.location && _document.location.pathname) || ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(touchstart)': '_openedBy = \"touch\"',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.asObservable().subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n    if (element.nodeName && element.nodeName.toLowerCase() === 'button'\n        && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => (_document && _document.location && _document.location.pathname) || ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!event.altKey && !event.metaKey && !event.shiftKey && !event.ctrlKey) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\nimport {_inheritCtorParametersMetadata} from '@angular/material/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n_inheritCtorParametersMetadata(MatTextareaAutosize, CdkTextareaAutosize);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Clear out the native tabindex here since we forward it to the underlying button\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges.subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /** Updates the outline gap the new time the zone stabilizes. */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => this.updateOutlineGap());\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Type} from '@angular/core';\n\n/**\n * Workaround for https://github.com/angular/material2/issues/12760. In order to work around\n * the issue where classes which extend external classes do not have the proper metadata in\n * ES2015, we just manually inherit the metadata for the constructor parameters.\n * TODO(devversion): check if we can remove the workaround after ivy landed.\n */\nexport function _inheritCtorParametersMetadata(target: Type<any>, base: Type<any>) {\n  (target as any)['ctorParameters'] = () => {\n    const baseParameters = (base as any)['ctorParameters'];\n    return (typeof baseParameters === 'function' ? baseParameters() : baseParameters) || [];\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["_this","_alignInkBar","MatTabNav","prototype","ngAfterContentChecked","this","_activeLinkChanged","activeTab","_tabLinks","find","tab","active","_activeLinkElement","_elementRef","ngOnDestroy","_onDestroy","next","complete","_inkBar","show","alignToElement","nativeElement","hide","type","Component","args","selector","exportAs","inputs","template","styles","host","class","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","ChangeDetectorRef","ViewportRuler","propDecorators","backgroundColor","Input","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_super","call","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","_ripplesGloballyDisabled","disabled","terminateOnPointerUp","animation","monitor","get","_isActive","value","updateActiveLink","enumerable","configurable","stopMonitoring","MatTabLink","decorators","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","mixinColor","MatToolbarRow","MatToolbar","elementRef","_platform","document","_document","tslib_1.__extends","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","subscribe","length","Array","from","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","_inheritCtorParametersMetadata","MatNestedTreeNode","_differs","ngAfterContentInit","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","pipe","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","CdkHeaderRowDef","MatHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","arguments","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTable","MatHeaderCellDef","MatColumnDef","MatCellDef","MatFooterCellDef","MatHeaderCell","MatCell","MatFooterCell","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","Subscription","EMPTY","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","observableOf","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","unsubscribe","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_ngZone","_inkBarPositioner","element","requestAnimationFrame","runOutsideAngular","_setStyles","style","visibility","positions","inkBar","left","width","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","toArray","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","max","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","Directionality","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","MatTabGroupBase","_MatTabGroupMixinBase","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","remove","add","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","arrowPosition","SORT_ANIMATION_TRANSITION","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","disableClear","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MAT_STEPPER_INTL_PROVIDER","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MAT_STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","stickyCssClass","CDK_TABLE_TEMPLATE","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDef","sticky","stickyEnd","columnDef","cssClassFriendlyName","CdkHeaderCell","CdkFooterCell","CdkCell","_step","_roundToDecimal","toString","split","pop","MatSlider","_thumbLabel","_tickInterval","_value","_min","parseFloat","toFixed","_percent","_calculatePercentage","_vertical","displayWith","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","ScrollDispatcher","MatDrawerContent","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","_opened","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","_animationStarted","_animationEnd","isOpen","openedVia","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_element","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","_primaryValueBar","animationEnd","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","MatSelect","_calculateOverlayPosition","itemHeight","_getItemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","empty","_getOptionIndex","_selectionModel","_countGroupLabelsBeforeOption","options","optionGroups","scrollBuffer","_scrollTop","_calculateOverlayScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","elementStyle","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_isNoopAnimation","_bufferValue","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","target","aria-valuemin","aria-valuemax","_appRef","_attached","MatMenuContent","context","_template","_outlet","DomPortalOutlet","_componentFactoryResolver","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedBy","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","button","asapScheduler","aria-haspopup","(touchstart)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_highlightCorrectOption","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","panel","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_getOptionScrollPosition","result","current","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_isNavList","_navList","hasAttribute","setLines","_lines","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","hadFocus","newActiveItem","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","focusedOption","focusedIndex","hasChanged","aria-multiselectable","_MatListMixinBase","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","_gridList","MAT_GRID_LIST","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","_dateAdapter","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","MatDatepickerContent","afterClosed","componentInstance","datepicker","_setColor","_createPopup","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","metaKey","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","CdkAccordionModule","MatExpansionModule","_colspan","property","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","aria-readonly","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","MatCheckbox","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","_calculateRippleRadius","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","calculatedRippleRadius","rippleWidth","ripple","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","stopImmediatePropagation","MatAnchor","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","defaultOptions","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","_isOpen","showPanel","MatAutocomplete","_autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MatAutocompleteSelectedEvent","optionSelected","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","baseParameters","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","normalizePassiveListenerOptions","passive","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","persistent","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}