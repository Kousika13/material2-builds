{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/list/list.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case HOME:\n        this._focusFirstTab();\n        event.preventDefault();\n        break;\n      case END:\n        this._focusLastTab();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** Focuses the first tab. */\n  private _focusFirstTab(): void {\n    for (let i = 0; i < this._labelWrappers.length; i++) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** Focuses the last tab. */\n  private _focusLastTab(): void {\n    for (let i = this._labelWrappers.length - 1; i > -1; i--) {\n      if (this._isValidIndex(i)) {\n        this.focusIndex = i;\n        break;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  QueryList\n} from '@angular/core';\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNodeDef,\n  CdkTreeNode,\n} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {mixinTabIndex, mixinDisabled, CanDisable, HasTabIndex} from '@angular/material/core';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'level',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T> implements HasTabIndex, CanDisable {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements HasTabIndex, CanDisable {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested treee\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.0.0-rc.1-603dfa4');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: Document,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && this._previousValue !== value &&\n      document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getHostWidth()});\n          }\n        });\n      }\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {filter, map, startWith, switchMap, take, takeUntil} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(option);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  ConnectionPositionPair,\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n      }\n    });\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: () => ({\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n      })\n    });\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(value, 0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair, direction);\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position\n      .withPositions([\n        {...origin.main, ...overlay.main},\n        {...origin.fallback, ...overlay.fallback}\n      ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair, direction: Direction) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = direction === 'ltr' ? 'left' : 'right';\n    } else if (position === 'end') {\n      this._transformOrigin = direction === 'ltr' ? 'right' : 'left';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  forwardRef,\n  Inject,\n  Optional,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n/** Workaround for https://github.com/angular/angular/issues/17849 */\nexport const _MatStep = CdkStep;\nexport const _MatStepper = CdkStepper;\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatCellDef,\n  MatHeaderCellDef,\n  MatColumnDef,\n  MatHeaderRowDef,\n  MatRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {BehaviorSubject, combineLatest, empty, Observable, Subscription} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange: Observable<Sort> = this._sort ? this._sort.sortChange : empty();\n    const pageChange: Observable<PageEvent> = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange.pipe(startWith(null!)))\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange.pipe(startWith(null!)))\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: () => _matInkBarPositioner\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n */\nexport const _matInkBarPositioner: _MatInkBarPositioner = (element: HTMLElement) => {\n  return {\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  };\n};\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: () => new MatSnackBarConfig(),\n    });\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => this._slideRenderer.stopThumbDrag());\n      });\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    this._thumbEl.style.transform = '';\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    this._thumbEl.style.transform = `translate3d(${dragX}px, 0, 0)`;\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      let exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: Document) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: Document) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, startWith, takeUntil, map, debounceTime} from 'rxjs/operators';\nimport {merge, fromEvent, Observable, Subject} from 'rxjs';\nimport {matDrawerAnimations} from './drawer-animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: () => false,\n    });\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  readonly _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatTooltip, TooltipComponent} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = coerceNumberProperty(value);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex = 0;\n    this._emitPageEvent();\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.emit({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: () => ({\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n      })\n    });\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements OnInit, AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<void>();\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone() {\n    this._animationDone.next();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter, take} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription, merge, of as observableOf} from 'rxjs';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._createOverlay().attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._resetMenu();\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(take(1))\n          .subscribe(() => menu.lazyContent!.detach());\n      }\n    } else if (menu.lazyContent) {\n      menu.lazyContent.detach();\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    position.positionChanges.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): FlexibleConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .flexibleConnectedTo(this._element)\n        .withPositions([\n          {originX, originY, overlayX, overlayY, offsetY},\n          {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n          {\n            originX,\n            originY: originFallbackY,\n            overlayX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          },\n          {\n            originX: originFallbackX,\n            originY: originFallbackY,\n            overlayX: overlayFallbackX,\n            overlayY: overlayFallbackY,\n            offsetY: -offsetY\n          }\n        ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuTrigger} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: Document) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) private _document: Document) {}\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {MatDatepicker, MatDatepickerContent} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Host,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {Observable, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> implements OnDestroy {\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  constructor(private _intl: MatDatepickerIntl,\n              @Host() @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n    this.calendar.stateChanges.pipe(takeUntil(this._destroyed))\n        .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this._stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  currentView: 'month' | 'year' | 'multi-year';\n\n  /**\n   * An observable that emits whenever there is a state change that the header may need to respond\n   * to.\n   */\n  get stateChanges(): Observable<void> {\n    return this._stateChanges.asObservable();\n  }\n  private _stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this._stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n\n    this.activeDate = this.startAt || this._dateAdapter.today();\n    this.currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this._stateChanges.next();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n      }\n    });\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '[class.mat-datepicker-content-above]': '_isAbove',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterContentInit, CanColor, OnInit, OnDestroy {\n\n  /** Subscription to changes in the overlay's position. */\n  private _positionChange: Subscription|null;\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone) {\n    super(elementRef);\n  }\n\n  ngOnInit() {\n    if (!this.datepicker._popupRef || this._positionChange) {\n      return;\n    }\n\n    const positionStrategy =\n      this.datepicker._popupRef.getConfig().positionStrategy! as FlexibleConnectedPositionStrategy;\n\n    this._positionChange = positionStrategy.positionChanges.subscribe(change => {\n      const isAbove = change.connectionPair.overlayY === 'bottom';\n\n      if (isAbove !== this._isAbove) {\n        this._ngZone.run(() => {\n          this._isAbove = isAbove;\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    this._focusActiveCell();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._positionChange) {\n      this._positionChange.unsubscribe();\n      this._positionChange = null;\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: Document) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement as HTMLElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    if (this._dialogRef) {\n      this._dialogRef.afterClosed().subscribe(() => this.close());\n      this._dialogRef.componentInstance.datepicker = this;\n    }\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: Document) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy', {\n      providedIn: 'root',\n      factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n      }\n    });\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens\n      .set(MatDialogContainer, dialogContainer)\n      .set(MAT_DIALOG_DATA, config.data)\n      .set(MatDialogRef, dialogRef);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deletion-target 7.0.0 deprecate in favor of `cdkTextareaAutosize`.\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n    this._focusActiveCell();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n\n    const isRtl = this._isRtl();\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  private _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    '[attr.role]': 'multiple ? \"group\" : \"radiogroup\"',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Used for storing a value temporarily, if it is assigned\n   * before the button toggles are initialized.\n   */\n  private _tempValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    this._tempValue = undefined;\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._tempValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._tempValue)) {\n      return !!this._tempValue.find(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._tempValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    // If the toggles haven't been initialized yet, save the value for later.\n    if (!this._buttonToggles) {\n      this._tempValue = value;\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit, CanDisableRipple {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    this._checked = this._isSingleSelector ? true : !this._checked;\n\n    if (this.buttonToggleGroup) {\n      this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n      this.buttonToggleGroup._onTouched();\n    }\n\n    // Emit a change event when the native input does.\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: Document,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef._keydownEvents.pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The bottom sheet configuration. */\n  bottomSheetConfig: MatBottomSheetConfig;\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) private _document: Document) {\n    super();\n\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n    Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, TemplatePortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, TemplateRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {MatBottomSheetConfig, MAT_BOTTOM_SHEET_DATA} from './bottom-sheet-config';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {of as observableOf} from 'rxjs';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable()\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n    const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.bottomSheetConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatBottomSheetRef, bottomSheetRef);\n    injectionTokens.set(MAT_BOTTOM_SHEET_DATA, config.data);\n\n    if (!userInjector || !userInjector.get(Directionality, null)) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheet} from './bottom-sheet';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n  providers: [MatBottomSheet],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n  OnDestroy,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n// Boilerplate for applying mixins to MatFormField.\n/** @docs-private */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  _outlineGapWidth = 0;\n\n  _outlineGapStart = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform to be made required.\n      private _platform?: Platform) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    Promise.resolve().then(() => {\n      this.updateOutlineGap();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this.floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: () => ({autoActiveFirstOption: false}),\n    });\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: () => true,\n});\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: () => inject(LOCALE_ID)\n});\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["_tabListContainer","type","ViewChild","args","_tabList","selectedIndex","Input","selectFocusedIndex","Output","indexFocused","MatTabHeader","MatTabNavBase","_elementRef","this","_MatTabNavMixinBase","mixinColor","MatTabNav","elementRef","_dir","_ngZone","_changeDetectorRef","_viewportRuler","_this","_super","call","_onDestroy","Subject","_disableRipple","tslib_1.__extends","Object","defineProperty","prototype","_backgroundColor","value","nativeElement","classList","remove","backgroundColor","add","coerceBooleanProperty","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","markForCheck","ngAfterContentInit","runOutsideAngular","dirChange","change","observableOf","merge","pipe","takeUntil","subscribe","_alignInkBar","ngAfterContentChecked","ngOnDestroy","next","complete","_inkBar","alignToElement","_tabLinks","forEach","link","disableRipple","Component","selector","exportAs","inputs","template","styles","host","class","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","ChangeDetectorRef","ViewportRuler","propDecorators","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_tabNavBar","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","rippleConfig","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","get","enumerable","configurable","event","preventDefault","MatTabLink","decorators","Directive","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","length","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","index","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","Directionality","MatStepperNext","[type]","CdkStepper","MatStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatHorizontalStepper","MatVerticalStepper","MatStep","MatStepLabel","MatStepHeader","MatStepperIcon","MatStepperIntl","ErrorStateMatcher","MatStepperModule","MatTable","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","CdkColumnDef","name","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","arguments","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","active","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","empty","pageChange","page","_renderChangesSubscription","unsubscribe","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","startWith","_orderData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_matInkBarPositioner","left","offsetLeft","width","offsetWidth","_inkBarPositioner","show","requestAnimationFrame","_setStyles","style","visibility","hide","positions","inkBar","templateRef","viewContainerRef","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_labelChange","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","matTabsAnimations","translateTab","trigger","state","transform","transition","animate","componentFactoryResolver","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","EventEmitter","_onCentered","_getLayoutDirection","dir","_origin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","animations","_portalHost","PortalHostDirective","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceNumberProperty","indexToSelect","_tabs","max","tabChangeEvent","_createChangeEvent","tab","_subscribeToTabLabels","_focusChanged","toArray","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","disabled","focusIndex","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","getOffsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","HOME","_focusFirstTab","END","_focusLastTab","ENTER","SPACE","resize","realign","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","containerEl","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","_afterDismissed","asObservable","MatSnackBarRef","afterOpened","containerInstance","_onEnter","onAction","_onAction","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","duration","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","dismissWithAction","[@contentFade]","MatSnackBarContainer","_destroyed","_onExit","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","snackBarConfig","detectChanges","exit","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","dismiss","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","injector","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","afterDismissed","_dismissAfter","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","userInjector","injectionTokens","WeakMap","set","PortalInjector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","OverlayModule","entryComponents","MatSnackBarModule","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_focusMonitor","_element","monitor","_intlSubscription","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","_MatStep","CdkStep","_MatStepper","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","icons","_icons","override","find","icon","_iconOverrides","_steps","_stateChanged","aria-orientation","ctorParameters","[class.mat-drawer-container-explicit-backdrop]","MatSidenavContainer","_drawers","MatSidenav","ContentChild","MatSidenavContent","MatSidenavModule","ScrollDispatchModule","PlatformModule","MatDrawer","MatDrawerContainer","MatDrawerContent","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","_slideRenderer","SlideToggleRenderer","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","dragging","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","dragPercentage","setTimeout","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","FocusMonitor","required","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragX","percentage","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSlider","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","input","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","displayWith","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","_sliderWrapper","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatSliderModule","_overlayRef","_afterOpened","_dismissedByAction","_finishDismiss","closed","clearTimeout","_durationTimeoutId","closeWithAction","_open","dispose","dismissedByAction","MatProgressSpinner","mode","platform","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","_isRippleDisabled","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","matDrawerAnimations","transformDrawer","MAT_DRAWER_DEFAULT_AUTOSIZE","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","autosize","hasBackdrop","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MAT_TOOLTIP_SCROLL_STRATEGY","overlay","inject","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_DEFAULT_OPTIONS","showDelay","hideDelay","touchendHideDelay","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","_getOrigin","_getOverlayPosition","strategy","flexibleConnectedTo","withFlexibleDimensions","withViewportMargin","withPositions","main","fallback","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","scrollStrategy","getConfig","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_transformOrigin","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatSelectModule","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","_fallbackAnimation","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_strokeWidth","diameter","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","Document","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","MatMenu","yPosition","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_hovered","openMenu","_cleanUpSubscriptions","toggleMenu","closeMenu","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetMenu","_resetAnimation","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","backdropClass","posX","posY","setPositionClasses","xPosition","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","aria-haspopup","(mousedown)","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","_disableOptionCentering","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","o","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_isRtl","_setSelectionByValue","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","error","console","warn","select","skip","deselect","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_propagateChanges","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","disableOptionCentering","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","sequence","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_onAnimationDone","_MatListMixinBase","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","added","removed","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","svg","_svgElementFromString","ELEMENT_NODE","cloneNode","MatIconRegistry","_setSvgAttributes","setAttribute","_fetchUrl","safeUrl","_httpClient","getMatIconNoHttpProviderError","url","_sanitizer","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","inProgressFetch","_inProgressUrlFetches","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","iconName","parts","svgIcon","namespace","getNamedSvgIcon","_setSvgElement","err","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","MatDatepickerInput","_datepicker","_datepickerSubscription","_selectedChanged","_cvaOnChange","dateInput","MatDatepickerInputEvent","dateChange","_localeSubscription","_valueChange","_disabledChange","registerOnValidatorChange","_validatorOnChange","validate","_validator","getPopupConnectionElementRef","getConnectedOverlayOrigin","_formField","_onInput","date","_dateAdapter","parse","_dateFormats","_lastValueValid","isValid","_getValidDateOrNull","_getThemePalette","_formatValue","format","display","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","A11yModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","addSvgIconInNamespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","setDefaultFontSetClass","getSvgIconFromUrl","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","forkJoin","foundIcon","_extractSvgIconFromSet","svgText","_createSvgElementForSingleIcon","responseText","iconSet","iconSource","iconElement","_toSvgElement","str","div","innerHTML","dateFilter","firstOfYear","createDate","year","getYear","addCalendarDays","minDate","maxDate","selectedChange","yearSelected","_matCalendarBody","monthSelected","createMissingDateImplError","_activeDate","today","oldActiveDate","validDate","deserialize","clampDate","_init","_selectedMonth","_getMonthInCurrentYear","_minDate","_maxDate","_focusActiveCell","_monthSelected","month","normalizedDate","activeDate","daysInMonth","getNumDaysInMonth","getDate","_handleCalendarBodyKeydown","addCalendarMonths","getMonth","addCalendarYears","_todayMonth","_yearLabel","getYearName","monthNames","getMonthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","MatCalendarCell","toLocaleUpperCase","_shouldEnableMonth","activeYear","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","preserveWhitespaces","startAt","startView","firstChange","view","monthView","yearView","multiYearView","headerComponent","_userSelection","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_popupRef","_positionChange","isAbove","_isAbove","[@transformPanel]","[class.mat-datepicker-content-touch]","[class.mat-datepicker-content-above]","_inputSubscription","_popupComponentRef","sameDate","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","completeClose","afterClosed","componentInstance","_setColor","_createPopup","keydownEvents","withPush","MatDialog","calendarHeaderComponent","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","oldDate","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","previousValue","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[attr.placeholder]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_hasSameMonthAndYear","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","selectedMonth","selectedDate","_todayDate","_monthLabel","_firstWeekOffset","getDayOfWeek","_createWeekCells","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","d1","d2","_selectedYear","_todayYear","activeOffset","_years","_createCellForYear","_yearSelected","yearsPerPage","_getActiveCell","yearName","_shouldEnableYear","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","MatChipAvatar","MatChipTrailingIcon","MatChip","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","selectable","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","registerInput","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","updateActiveItemIndex","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","CHIP_DECLARATIONS","ɵ0","useValue","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatAnchor","MatButton","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_tempValue","_syncButtonToggle","_isSelected","_isPrechecked","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","_manuallyFloatingLabel","MatAutocompleteTrigger","_resetLabel","floatLabel","_scrollToOption","autocomplete","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","_zone","optionChanges","_positionStrategy","reapplyLastPosition","_resetActiveItem","_setVisibility","panelClosingActions","_setValueAndClose","_destroyPanel","closePanel","_setTriggerValue","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","_attachOverlay","getMatAutocompleteMissingPanelError","_getHostWidth","_viewportSubscription","_closingActionsSubscription","wasOpen","_isOpen","_overlayAttached","_getConnectedElement","autoActiveFirstOption","_canOpen","readOnly","aria-autocomplete","(focusin)","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","Host","MatAutocomplete","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","MatBottomSheetRef","bottomSheetConfig","_keydownEvents","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","MatBottomSheetModule","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","focusMonitor","stopImmediatePropagation","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_labelOptions","float","_appearance","appearance","_hideRequiredMarker","_processHints","_floatLabel","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_animateAndLockLabel","fromEvent","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","defaults","showPanel","optionSelected","_autoActiveFirstOption","_componentDestroyed","_closeKeyEventStream","optionSelections","openPanel","_outsideClickStream","clickTarget","formField","activeOption","prevActiveItem","TAB","_handleInput","_previousValue","activeElement","shouldAnimate","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","defaultTabIndex","matcher","mixinInitialized","_pendingSubscribers","initialized","Observable","subscriber","_notifySubscriber","_markInitialized","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","LOCALE_ID","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","runTimeoutOutsideZone","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","MatOptionSelectionChange","_parent","_active","_mostRecentViewValue","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked"],"mappings":"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"}