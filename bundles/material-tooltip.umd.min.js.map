{"version":3,"file":"material-tooltip.umd.min.js","sources":["../../src/lib/tooltip/tooltip.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  ScrollDispatcher,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n  ConnectedPositionStrategy,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        // TODO(andrewjs): When the overlay's position can be\n        // dynamically changed, do not destroy the tooltip.\n        this._detach();\n        this._updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n    // @deletion-target 6.0.0\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden().subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback)\n      .withScrollableContainers(\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef)\n      );\n\n    strategy.onPositionChange.pipe(filter(() => !!this._tooltipInstance)).subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance!.isVisible()) {\n        // After position changes occur and the overlay is clipped by\n        // a parent scrollable then close the tooltip.\n        this._ngZone.run(() => this.hide(0));\n      } else {\n        // Otherwise recalculate the origin based on the new position.\n        this._tooltipInstance!._setTransformOrigin(change.connectionPair);\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef.detachments().subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position = this._overlayRef!.getConfig().positionStrategy as ConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position\n      .withPositions([])\n      .withFallbackPosition(origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n    LayoutModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n"],"names":["getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","scrollThrottle","SCROLL_THROTTLE_MS","matTooltipAnimations","tooltipState","trigger","state","style","transform","transition","animate","MAT_TOOLTIP_SCROLL_STRATEGY","InjectionToken","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MAT_TOOLTIP_DEFAULT_OPTIONS","MatTooltip","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","_platform","_ariaDescriber","_focusMonitor","_scrollStrategy","_dir","_defaultOptions","_this","this","_position","_disabled","showDelay","hideDelay","_message","_manualListeners","Map","element","nativeElement","IOS","nodeName","webkitUserSelect","userSelect","set","show","hide","forEach","listener","event","addEventListener","monitor","subscribe","origin","run","Object","defineProperty","prototype","value","_overlayRef","_detach","_updatePosition","coerceBooleanProperty","removeDescription","trim","_isTooltipVisible","_updateTooltipMessage","describe","message","_tooltipClass","_tooltipInstance","_setTooltipClass","ngOnDestroy","dispose","removeEventListener","clear","stopMonitoring","delay","disabled","overlayRef","_createOverlay","_portal","ComponentPortal","TooltipComponent","attach","instance","afterHidden","toggle","isVisible","_handleKeydown","e","keyCode","ESCAPE","stopPropagation","_handleTouchend","touchendHideDelay","_getOrigin","_getOverlayPosition","strategy","connectedTo","main","withFallbackPosition","fallback","withScrollableContainers","getAncestorScrollContainers","onPositionChange","pipe","filter","change","scrollableViewProperties","isOverlayClipped","_setTransformOrigin","connectionPair","create","direction","positionStrategy","panelClass","scrollStrategy","detachments","hasAttached","detach","getConfig","withPositions","isDirectionLtr","originX","originY","_a","_invertPosition","x","y","isLtr","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","asObservable","take","updatePosition","tooltipClass","type","Directive","args","selector","exportAs","host","(longpress)","(keydown)","(touchend)","ElementRef","ScrollDispatcher","ViewContainerRef","NgZone","Platform","AriaDescriber","FocusMonitor","undefined","decorators","Inject","Directionality","Optional","Input","_positionDeprecated","_changeDetectorRef","_breakpointObserver","_visibility","_closeOnInteraction","_transformOrigin","_onHide","Subject","_isHandset","observe","Breakpoints","Handset","_hideTimeoutId","clearTimeout","_showTimeoutId","setTimeout","overlayPosition","axis","_animationStart","_animationDone","toState","next","_handleBodyInteraction","markForCheck","Component","template","styles","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","animations","aria-hidden","ɵ0","NgModule","imports","CommonModule","OverlayModule","MatCommonModule","PlatformModule","A11yModule","LayoutModule","exports","declarations","entryComponents","providers","ARIA_DESCRIBER_PROVIDER","useValue","MatTooltipModule"],"mappings":"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"}