{"version":3,"file":"material-grid-list.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(private _tiles: QueryList<MatGridTile>) {}\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = this._tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value || ''}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = `${value || ''}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator(this._tiles);\n    }\n\n    const tracker = this._tileCoordinator;\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","calc","exp","normalizeUnits","value","match","setPrototypeOf","__proto__","Array","p","hasOwnProperty","MatGridTile","_element","_rowspan","_colspan","defineProperty","Math","round","coerceNumberProperty","_setStyle","property","nativeElement","style","type","Component","args","selector","exportAs","host","class","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","propDecorators","MatGridTileText","decorators","ctorParameters","ElementRef","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","_tiles","columnIndex","rowIndex","lastRowMax","max","apply","tracker","rowCount","update","numColumns","_this","fill","length","positions","map","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","Error","gapEndIndex","_nextRow","indexOf","_findGapEndIndex","i","start","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","init","gutterSize","cols","direction","_gutterSize","_cols","_direction","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","offset","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","_super","fixedRowHeight","call","tslib_1.__extends","test","reset","list","_setListStyle","forEach","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","split","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_dir","_gutter","newValue","_rowHeight","_setTileStyler","ngOnInit","_checkCols","_checkRowHeight","ngAfterContentChecked","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","index","pos","Input","NgModule","imports","MatLineModule","MatCommonModule","exports","declarations","MatGridListModule"],"mappings":"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"}